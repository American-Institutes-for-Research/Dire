// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// accumulator_outer_cpp
NumericMatrix accumulator_outer_cpp(NumericMatrix mat);
RcppExport SEXP _Dire_accumulator_outer_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(accumulator_outer_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// accumulator_outer_fast
Rcpp::NumericMatrix accumulator_outer_fast(const Rcpp::NumericMatrix& mat);
RcppExport SEXP _Dire_accumulator_outer_fast(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(accumulator_outer_fast(mat));
    return rcpp_result_gen;
END_RCPP
}
// ldbinomC
NumericVector ldbinomC(NumericVector x, NumericVector pr);
RcppExport SEXP _Dire_ldbinomC(SEXP xSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(ldbinomC(x, pr));
    return rcpp_result_gen;
END_RCPP
}
// multItems
NumericVector multItems(NumericVector x1, NumericVector guess, NumericVector D, NumericVector slope, NumericVector nodes, NumericVector difficulty);
RcppExport SEXP _Dire_multItems(SEXP x1SEXP, SEXP guessSEXP, SEXP DSEXP, SEXP slopeSEXP, SEXP nodesSEXP, SEXP difficultySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guess(guessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type difficulty(difficultySEXP);
    rcpp_result_gen = Rcpp::wrap(multItems(x1, guess, D, slope, nodes, difficulty));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Dire_accumulator_outer_cpp", (DL_FUNC) &_Dire_accumulator_outer_cpp, 1},
    {"_Dire_accumulator_outer_fast", (DL_FUNC) &_Dire_accumulator_outer_fast, 1},
    {"_Dire_ldbinomC", (DL_FUNC) &_Dire_ldbinomC, 2},
    {"_Dire_multItems", (DL_FUNC) &_Dire_multItems, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_Dire(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
